#!/usr/bin/python3
"""
.. module:: setup
   :platform: posix
   :synopsis: Build the mauzr package.

.. moduleauthor:: Alexander Sowitzki <dev@eqrx.net>
"""
import re
import setuptools

class VersionInfo:
    """ Represent the current software version. """

    TAG_PATTERN = re.compile(r"v(\d\d(?:0\d|1[0-2])(?:[0-2]\d|3[0-1])\.\d\d?)")
    """ Pattern to match a version tag name. """

    def __init__(self):
        from subprocess import check_output
        # Fetch git refs
        log_output = check_output(("git", "log", "--simplify-by-decoration",
                                   "--decorate", "--pretty=%d", "HEAD")
                                 ).decode()
        # Find tags in refs
        match = VersionInfo.TAG_PATTERN.search(log_output)
        # Take last tag name and use match to define version
        tag_name = match.group(0)
        self.version = match.group(1)
        # Count commits between HEAD and tag to define build
        build_commit_lines = check_output(("git", "log", tag_name + "..HEAD",
                                           "--pretty=oneline")
                                         ).decode().split("\n")
        self.build = str(len([True for line in build_commit_lines]) - 1)

        self.branch = check_output(("git", "rev-parse",
                                    "--abbrev-ref", "HEAD")).decode().strip()

        # Write version to meta module
        with open("mauzr/_meta.py", "w") as metafile:
            metafile.write("\"\"\" Autogenerated file. \"\"\"\n\n")
            metafile.write("__version__ = \"" + self.python_version + "\"\n")

    @property
    def python_version(self):
        """ Python version. """

        if self.build != "0":
            return self.version + ".post" + self.build
        return self.version

# Generate version
VERSION = VersionInfo()

class VersionCommand(setuptools.Command):
    """ Setuptools command to get version information. """

    description = "Get version information"
    """ Command description. """
    user_options = []
    """ Available options. """

    def initialize_options(self):
        """ Implements required method. """
        pass

    def finalize_options(self):
        """ Implements required method. """
        pass

    @staticmethod
    def run():
        """ Print python version of build. """
        print(VERSION.python_version)

setuptools.setup(
    version=VERSION.python_version,
    author="Alexander Sowitzki",
    author_email="dev@eqrx.net",
    url="http://mauzr.eqrx.net",
    name='mauzr',
    keywords="agent cps distributed framework hardware iot mqtt smart",
    description="Framework for developing cyber-physical systems and"
                " IoT devices",
    packages=setuptools.find_packages(),
    cmdclass={"version": VersionCommand},
    classifiers=[
        'Development Status :: 3 - Alpha',
        'Environment :: Console',
        'Environment :: No Input/Output (Daemon)',
        'Environment :: X11 Applications',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: '
        'GNU Affero General Public License v3 or later (AGPLv3+)',
        'Natural Language :: English',
        'Programming Language :: Python :: 3 :: Only',
        'Programming Language :: Python :: Implementation :: MicroPython',
        'Programming Language :: Python :: Implementation :: CPython',
        'Topic :: Home Automation',
        'Topic :: Software Development :: Embedded Systems',
        'Topic :: Software Development :: Libraries :: Application Frameworks',
        'Topic :: Software Development :: Libraries :: Python Modules',
        'Topic :: System :: Hardware :: Hardware Drivers'
    ],
    setup_requires=['sphinx', 'pytest-runner', 'pytest-pylint'],
    tests_require=['pytest', 'pylint'],
    install_requires=['paho-mqtt', 'PyYAML'],
    entry_points={
        "console_scripts": [
            'mauzr-picamera=mauzr.platform.raspberry.camera:main',
            'mauzr-linuxaudio=mauzr.platform.linux.audio.driver:main',
            'mauzr-imageviewer=mauzr.util.image.viewer:main',
            'mauzr-rrdlogger=mauzr.util.rrd.logger:main'
        ]
    }
)
